openapi: 3.0.0
info:
  title: BeerLot API
  description: BeerLot API
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/beerlot-contact/beerlot-api-spec/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://beerlot-core-ltcpnnhkfa-an.a.run.app/api/v1
    description: DEV

security:
  - password:
      - read
      - write
tags:
  - name: auth
    description: auth management
  - name: user
    description: user management
  - name: beer
    description: beer management
  - name: beer review
    description: beer review management
  - name: beer favorite
    description: beer favorite management
  - name: beer category
    description: beer category management
  - name: beer tag
    description: beer tag management
paths:
  /signup:
    post:
      tags:
        - auth
      summary: Signup User
      operationId: createUser
      requestBody:
        description: User Signup Form
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              CreateUserRequest_Example:
                $ref: '#/components/examples/CreateUserRequest_Example'
      responses:
        "201":
          description: Created.
        "500":
          description: Internal server error. Unexpected error.
          
  /users:
    get:
      tags:
        - user
      summary: Check if given username already exists
      operationId: checkUsernameDuplicated
      parameters:
        - name: username
          in: query
          description: username
          required: true
          style: form
          explode: true
          schema:
            type: string
          example: 비어러버
      responses:
        "200":
          description: Ok to use the username.
        "409":
          description: Conflict. The username already exists.
        "500":
          description: Internal server error. Unexpected error.

    patch:
      tags:
        - user
      summary: Update User Profile
      operationId: updateUser
      requestBody:
        description: User Profile Update Form
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              UpdateUserRequest_Example:
                $ref: '#/components/examples/UpdateUserRequest_Example'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindUserResponse'
              examples:
                UserRes_Example:
                  $ref: '#/components/examples/FindUserResponse_Example'
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "500":
          description: Internal server error. Unexpected error.
  /users/me:
    get:
      tags:
        - user
      summary: Get User Profile
      operationId: getUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindUserResponse'
              examples:
                FindUserRes_Example:
                  $ref: '#/components/examples/FindUserResponse_Example'
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "500":
          description: Internal server error. Unexpected error.
  /beers:
    get:
      tags:
        - beer
      summary: Get all beers with full search
      operationId: findBeersBySearch
      parameters:
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/countries'
        - $ref: '#/components/parameters/volumes'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeerPage'
              examples:
                BeerPage_Example:
                  $ref: '#/components/examples/BeerPage_Example'
              
        "500":
          description: Internal server error. Unexpected error.
      security: []
  /beers/{beerId}:
    get:
      tags:
        - beer
      summary: Get one beer
      operationId: findBeerById
      parameters:
        - name: beerId
          in: path
          description: beer id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindBeerResponse'
              examples:
                FindBeerRes_Example:
                  $ref: '#/components/examples/FindBeerResponse_Example'
        "404":
          description: Not found. The beer with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
      security: []
  /beers/{beerId}/reviews:
    get:
      tags:
        - beer review
      summary: Get all reviews specified by beer ID
      operationId: findReviewsByBeerId
      parameters:
        - $ref: '#/components/parameters/beerId'
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindReviewResponse'
              examples:
                FindReviewsResponse_Example:
                  $ref: '#/components/examples/FindReviewsResponse_Example'
        "404":
          description: Not found. The beer with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
    post:
      tags:
        - beer review
      summary: Create a new review
      operationId: createReview
      parameters:
        - name: beerId
          in: path
          description: beer id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
            examples:
              ReviewCreateReq_Example:
                $ref: '#/components/examples/ReviewCreateRequest_Example'
        required: true
      responses:
        "201":
          description: Review created.
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "404":
          description: Not found. The beer with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
  /reviews/{reviewId}:
    get:
      tags:
        - beer review
      summary: Get one review with specified ID
      operationId: getReview
      parameters:
        - name: reviewId
          in: path
          description: beer review id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      responses:
        "200":
          description: Ok. Get review.
          content:
            application/json:
              examples:
                FindReviewResponse_Example:
                  $ref: '#/components/examples/FindReviewResponse_Example'
        "404":
          description: Not found. The review with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
    delete:
      tags:
        - beer review
      summary: Delete the review
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          description: beer review id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      responses:
        "204":
          description: Review deleted.
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "403":
          description: Forbidden. Inproper authorization.
        "404":
          description: Not found. The review with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
    patch:
      tags:
        - beer review
      summary: Update the review
      operationId: updateReview
      parameters:
        - name: reviewId
          in: path
          description: beer review id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
            examples:
              ReviewCreateRequest_Example:
                $ref: '#/components/examples/ReviewCreateRequest_Example'
        required: true
      responses:
        "200":
          description: Ok. Review updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindReviewResponse'
              examples:
                FindReviewResponse_Example:
                  $ref: '#/components/examples/FindReviewResponse_Example'
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "403":
          description: Forbidden. Inproper authorization.
        "404":
          description: Not found. The review with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
  /beers/{beerId}/favorites:
    post:
      tags:
        - beer favorite
      summary: Favorite the beer with specified id
      operationId: createFavorite
      parameters:
        - name: beerId
          in: path
          description: beer id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      responses:
        "200":
          description: Already favorited.
        "201":
          description: Favorite created.
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "404":
          description: Not found. The beer with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
    delete:
      tags:
        - beer favorite
      summary: Unfavorite the beer with specified id
      operationId: deleteFavorite
      parameters:
        - name: beerId
          in: path
          description: beer id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      responses:
        "200":
          description: No favorite found.
        "204":
          description: Unfavorite succeeded.
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "404":
          description: Not found. The beer with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
  /categories:
    get:
      tags:
        - beer category
      summary: Get all categories
      operationId: getCategories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                  - id: 1
                    name: 에일
                    description: This is Ale.
                    children:
                      - id: 10
                        name: 아메리칸 블론드 에일
                        description: This is American Blonde Ale.
                  - id: 2
                    name: IPA
                    children:
                      - id: 17
                        name: 잉글리쉬 IPA
                        description: This is English IPA.
                      - id: 21
                        name: 아메리칸 IPA
                        description: This is American IPA.
                items:
                  $ref: '#/components/schemas/FindCategorySupResponse'
        "500":
          description: Internal server error. Unexpected error.
      security: []
  /categories/{categoryId}:
    get:
      tags:
        - beer category
      summary: Get one category found by category id
      operationId: getCategory
      parameters:
        - name: categoryId
          in: path
          description: beer category id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
          example: "1"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindCategorySupResponse'
              examples:
                FindCategoryResponse_Example:
                  $ref: '#/components/examples/FindCategoryResponse_Example'
        "404":
          description: Not found. The category with specified ID was not found.
        "500":
          description: Internal server error. Unexpected error.
      security: []
  /tags:
    get:
      tags:
        - beer tag
      summary: Get all beer tags
      operationId: getTags
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                  - id: 1
                    name_ko: 사이다
                    name_en: Cider
                  - id: 2
                    name_ko: 생강
                    name_en: Ginger
                items:
                  $ref: '#/components/schemas/FindTagResponse'
        "500":
          description: Internal server error. Unexpected error.
      security: []
components:
  schemas:
    ProviderType:
      type: string
      enum:
        - FACEBOOK
        - GOOGLE
        - KAKAO
        - NAVER
    RoleType:
      type: string
      enum:
        - GENERAL
        - ADMIN
    BeerPage:
      type: object
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/FindBeerResponse'
        page_request:
          type: object
          properties:
            page:
              type: integer
            size:
              type: integer
            offset:
              type: integer
        page:
          type: integer
        total_elements:
          type: integer
          format: int32
        total_pages:
          type: integer
        nextPage:
          type: integer
          format: int32
   
    CreateUserRequest:
      description: User Signup Form
      required:
        - email
        - username
        - provider_type
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        image_url:
          type: string
        provider_type:
          $ref: '#/components/schemas/ProviderType'
          
    UpdateUserRequest:
      description: User Profile Update Form
      type: object
      required:
        - username
      properties:
        username:
          type: string
        image_url:
          type: string
        status_message:
          type: string
    ReviewCreateRequest:
      required:
        - content
        - rate
      type: object
      properties:
        content:
          type: string
        rate:
          multipleOf: 0.5
          type: number
          format: float
    BaseResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
    FindUserResponse:
      description: User Find Response
      required:
        - email
        - username
        - provider_type
        - role_type
        - image_url
        - status_message
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        provider_type:
            $ref: '#/components/schemas/ProviderType'
        role_type:
            $ref: '#/components/schemas/RoleType'
        image_url:
          type: string
        status_message:
          type: string
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
    FindBeerResponse:
      description: Beer Find Response
      required:
        - description
        - name_en
        - name_ko
        - country
        - volume
      type: object
      properties:
        name_en:
          type: string
        name_ko:
          type: string
        description:
          type: string
        country:
          $ref: '#/components/schemas/FindCountryResponse'
        volume:
          minimum: 0.0
          type: number
          format: float
        image_url:
          type: string
        category:
          $ref: '#/components/schemas/FindCategorySupResponse'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/FindTagResponse'
      example:
        $ref: '#/components/examples/FindBeerResponse_Example'
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
    FindCountryResponse:
      type: object
      properties:
        code:
          type: string
    FindCategorySupResponse:
      required:
        - name_ko
        - name_en
        - description
        - parent
      type: object
      properties:
        name_ko:
          type: string
        name_en:
          type: string
        description:
          type: string
        parent:
          $ref: '#/components/schemas/FindCategorySupResponse'
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
    FindTagResponse:
      required:
        - name
      type: object
      properties:
        name_ko:
          type: string
        name_en:
          type: string
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
    FindReviewResponse:
      required:
        - rate
      type: object
      properties:
        content:
          type: string
        rate:
          type: integer
          format: float
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
  responses:
    Created:
      description: Created.
    Unauthorized:
      description: Unauthorized. Access token is missing or invalid.
    Forbidden:
      description: Forbidden. Inproper authorization.
    InternalServerError:
      description: Internal server error. Unexpected error.

  parameters:
    userId:
      name: userId
      in: path
      description: User ID
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
      example: 1
    keyword:
      name: keyword
      in: query
      description: Search keyword
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 골든 에일
    categories:
      name: categories
      in: query
      description: Category IDs
      required: false
      style: form
      explode: true
      schema:
        type: array
        example:
          - 1
          - 2
        items:
          type: integer
          format: int64
    countries:
      name: countries
      in: query
      description: Countries
      required: false
      style: form
      explode: true
      schema:
        type: array
        example:
          - KO
          - US
        items:
          type: string
    volumes:
      name: volumes
      in: query
      description: Beer Alcohol Volume
      required: false
      style: form
      explode: true
      schema:
        type: array
        example:
          - 4
          - 8
        items:
          type: integer
    beerId:
      name: beerId
      in: path
      description: beer id
      required: true
      schema:
        type: integer
        format: int64
      example: 1
    categoryId:
      name: categoryId
      in: path
      description: beer category id
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
      example: "1"
    reviewId:
      name: reviewId
      in: path
      description: beer review id
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
      example: "1"
    page:
      name: page
      in: query
      description: page number
      required: true
      style: form
      explode: true
      schema:
        type: integer
    size:
      name: size
      in: query
      description: size of one page
      required: true
      style: form
      explode: true
      schema:
        type: integer


  examples:        
    BeerPage_Example:
      value:
        contents:
          - id: 1
            name_ko: 빅 웨이브
            name_en: Bigwave
            description: 미묘한 과일 향과 섬세한 홉 향이 나는 가벼운 골든 에일입니다. 부드럽고 마시기 좋은 상쾌한 에일입니다. 가볍게
              볶은 허니 몰트는 이 맥주의 황금빛 색조에 기여하고 우리의 특별한 홉 블렌드로 균형을 이루는 약간의 단맛을 제공합니다.
            country:
              code: US
              name_ko: 미국
              name_en: The United States
            volume: 4.4
            image_url: "returned_from_server: <base_url>/<file_name>"
            category:
              id: 1
              name_ko: 아메리칸 블론드 에일
              name_en: American Blonde Ale
              description: 아메리칸 블론드 에일은...
              parent:
                id: 10
                name_ko: 에일
                name_en: Ale
                description: 에일은...
            tags:
              - id: 1
                name_ko: 시트라
                name_en: Citra
                description: 시트라 홉은...
        page_request: 
          page: 1
          size: 1
          offfset: 0
        page: 1
        total_elements: 1
        total_pages: 1
        next_page: null
    CreateUserRequest_Example:
      value:
        email: beer.lover@email.com
        username: 비어러버
        provider_type: 
    UpdateUserRequest_Example:
      value:
        username: 퇴근후한캔
    ReviewCreateRequest_Example:
      value:
        content: 이 맥주 진짜 맛있어요! 보일 때마다 사먹을거야
        rate: 5.0
    FindUserResponse_Example:
      value:
        id: 1
        email: beer.lover@email.com
        password: beer10ver!@#
        username: 비어러버
        image_url: "returned_from_server: <base_url>/<file_name>"
        email_verified: true
    FindBeerResponse_Example:
      value:
        id: 1
        name_ko: 빅 웨이브
        name_en: Bigwave
        description: 미묘한 과일 향과 섬세한 홉 향이 나는 가벼운 골든 에일입니다. 부드럽고 마시기 좋은 상쾌한 에일입니다. 가볍게
          볶은 허니 몰트는 이 맥주의 황금빛 색조에 기여하고 우리의 특별한 홉 블렌드로 균형을 이루는 약간의 단맛을 제공합니다.
        country:
          code: US
          name_ko: 미국
          name_en: The United States
        volume: 4.4
        image_url: "returned_from_server: <base_url>/<file_name>"
        category:
          id: 1
          name_ko: 아메리칸 블론드 에일
          name_en: American Blonde Ale
          description: 아메리칸 블론드 에일은...
          parent:
            id: 10
            name_ko: 에일
            name_en: Ale
            description: 에일은...
        tags:
          - id: 1
            name_ko: 시트라
            name_en: Citra
            description: 시트라 홉은...
    FindCategoryResponse_Example:
      value:
        id: 1
        name: 아메리칸 블론드 에일
        description: This is American Blonde Ale.
    FindCountryResponse_Example:
      value:
        code: US
    FindTagResponse_Example:
      value:
        id: 1
        name_ko: 사이다
        name_en: Cider
    FindReviewResponse_Example:
      value:
        id: 1
        content: 이 맥주 진짜 맛있어요! 보일 때마다 사먹을거야
        rate: 5.0
    FindReviewsResponse_Example:
      value:
        - id: 1
          content: 이 맥주 진짜 맛있어요! 보일 때마다 사먹을거야
          rate: 5.0
        - id: 10
          content: 생각보다 좀 맹맹했어요ㅠㅠ
          rate: 3.5
  securitySchemes:
    password:
      type: oauth2
      flows:
        password:
          tokenUrl: http://example.com/oauth/token
          scopes:
            write: allows modifying resources
            read: allows reading resources