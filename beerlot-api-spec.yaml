openapi: 3.0.0

servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/beerlot-contact/beerlot-api-spec/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/beerlot.contact/beerlot-api-spec/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/beerlot.contact/beerlot-api/1.0.0

info:
  version: "1.0.0"
  title: BeerLot API
  description: >-
    BeerLot API

security:
  - password:
      - read
      - write

tags:
  - name: member
    description: member management
  - name: beer
    description: beer management
  - name: beer review
    description: beer review management
  - name: beer favorite
    description: beer favorite management
  - name: beer category
    description: beer category management
  - name: beer tag
    description: beer tag management

paths:
  ####################
  # MEMBER API
  ####################
  /members:
    post:
      tags:
        - member
      summary: Signup
      operationId: createMember
      requestBody:
        required: true
        description: Member Signup Form
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberCreateReqDto'
            examples:
              MemberReqDto_Example:
                $ref: '#/components/examples/MemberReqDto_Example'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - member
      summary: Update Member Profile
      operationId: updateMember
      requestBody:
        required: true
        description: Member Profile Update Form
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberUpdateReqDto'
            examples:
              MemberUpdateReq_Example:
                $ref: '#/components/examples/MemberUpdateReqDto_Example'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResDto'
              examples:
                MemberRes_Example:
                  $ref: '#/components/examples/MemberResDto_Example'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Check if given username already exists
      operationId: checkUsernameDuplicated
      tags:
        - member
      parameters:
        - in: query
          name: username
          description: username
          schema:
            type: string
          example: '비어러버'
          required: true
      responses:
        '200':
          description: Ok to use the username.
        '409':
          description: Conflict. The username already exists.
        '500':
          $ref: '#/components/responses/InternalServerError'

  /members/me:
    get:
      tags:
        - member
      summary: Get Member Profile
      operationId: getMember
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResDto'
              examples:
                MemberRes_Example:
                  $ref: '#/components/examples/MemberResDto_Example'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ####################
  # BEER API
  ####################
  /beers:
    parameters:
      - $ref: '#/components/parameters/keyword'
      - $ref: '#/components/parameters/categories'
      - $ref: '#/components/parameters/countries'
      - $ref: '#/components/parameters/volumes'
    get:
      tags:
        - beer
      summary: Get all beers with full search
      operationId: getBeersWithSearch
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindBeerResDto'
                example:
                  - id: 1
                    name_ko: '빅 웨이브'
                    name_en: 'Bigwave'
                    description: '미묘한 과일 향과 섬세한 홉 향이 나는 가벼운 골든 에일입니다. 부드럽고 마시기 좋은 상쾌한 에일입니다. 가볍게 볶은 허니 몰트는 이 맥주의 황금빛 색조에 기여하고 우리의 특별한 홉 블렌드로 균형을 이루는 약간의 단맛을 제공합니다.'
                    origin:
                      code: 'US'
                      name_ko: '미국'
                      name_en: 'The United States'
                    volume: 4.4
                    image_url: 'returned_from_server: <base_url>/<file_name>'
                    category:
                      id: 1
                      name_ko: '아메리칸 블론드 에일'
                      name_en: 'American Blonde Ale'
                      description: '아메리칸 블론드 에일은...'
                      parent:
                        id: 10
                        name_ko: '에일'
                        name_en: 'Ale'
                        description: '에일은...'
                    tags: 
                      - id: 1
                        name_ko: '시트라'
                        name_en: 'Citra'
                        description: '시트라 홉은...'
                    
                  - id: 2
                    name_ko: '구스 아일랜드 IPA'
                    name_en: 'Goose Island IPA'
                    description: '영국에서 인도로 배송된 에일을 긴 여정 동안 고유한 맛을 보존하기 위해 홉을 많이 사용했던 때를 회상합니다. 결과는 과일 향이 나는 홉 애호가의 꿈이며 드라이한 몰트 미디움과 긴 홉 피니시가 특징입니다.'
                    origin:
                      code: 'US'
                      name_ko: '미국'
                      name_en: 'The United States'
                    volume: 5.9
                    image_url: 'returned_from_server: <base_url>/<file_name>'
                    category:
                      id: 2
                      name_ko: '잉글리쉬 아이피에이'
                      name_en: 'English IPA'
                      description: '잉글리쉬 아이피에ㅇ는...'
                      parent:
                        id: 20
                        name_ko: '아이피에이'
                        name_en: 'IPA'
                        description: '아이피에이는...'
                    tags: 
                      - id: 1
                        name_ko: '시트라'
                        name_en: 'Citra'
                        description: '시트라 홉은...'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /beers/{beerId}:
    parameters:
      - $ref: '#/components/parameters/beerId'
    get:
      tags:
        - beer
      summary: Get one beer
      operationId: getBeer
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindBeerResDto'
              examples:
                FindBeerRes_Example:
                  $ref: '#/components/examples/FindBeerResDto_Example'
              
        '404':
          description: Not found. The beer with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
  ####################
  # REVIEW API
  ####################
  /reviews/{beerId}:
    post:
      tags:
        - beer review
      summary: Create a new review
      operationId: createReview
      parameters:
        - $ref: '#/components/parameters/beerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateReqDto'
            examples:
              ReviewCreateReq_Example:
                $ref: '#/components/examples/ReviewCreateReqDto_Example'
      responses:
        '201':
          description: Review created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found. The beer with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - beer review
      parameters:
        - $ref: '#/components/parameters/beerId'
      summary: Get all reviews specified by beer ID
      operationId: getReviews
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewResDto'
                example:
                  - id: 1
                    content: '이 맥주 진짜 맛있어요! 보일 때마다 사먹을거야'
                    rate: 5.0
                  - id: 2
                    content:  '생각한것보다 좀 맹맹했어요ㅜㅜ'
                    rate: 3.5

        '404':
          description: Not found. The beer with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reviews/{reviewId}:
    patch:
      tags:
        - beer review
      summary: Update the review
      operationId: updateReview
      parameters:
        - $ref: '#/components/parameters/reviewId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateReqDto'
            examples:
              ReviewCreateReq_Example:
                $ref: '#/components/examples/ReviewCreateReqDto_Example'
      responses:
        '200':
          description: Ok. Review updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResDto'
              examples:
                ReviewRes_Example:
                  $ref: '#/components/examples/ReviewResDto_Example'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not found. The review with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - beer review
      parameters:
        - $ref: '#/components/parameters/reviewId'
      summary: Get one review with specified ID
      operationId: getReview
      responses:
        '200':
          description: Ok. Get review.
          content:
            application/json:
              examples:
                ReviewRes_Example:
                  $ref: '#/components/examples/ReviewResDto_Example'
        '404':
          description: Not found. The review with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - beer review
      parameters:
        - $ref: '#/components/parameters/reviewId'
      summary: Delete the review
      operationId: deleteReview
      responses:
        '204':
          description: Review deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not found. The review with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'

  ####################
  # FAVORIATE API
  ####################
  /beers/{beerId}/favorites:
    post:
      tags:
        - beer favorite
      parameters:
        - $ref: '#/components/parameters/beerId'
      summary: Favorite the beer with specified id
      operationId: createFavorite
      responses:
        '200':
          description: Already favorited.
        '201':
          description: Favorite created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found. The beer with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      tags:
        - beer favorite
      parameters:
        - $ref: '#/components/parameters/beerId'
      summary: Unfavorite the beer with specified id
      operationId: deleteFavorite
      responses:
        '200':
          description: No favorite found.
        '204':
          description: Unfavorite succeeded.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found. The beer with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
        
  ####################
  # CATEGORY API
  ####################
  /categories:
    get:
      tags:
        - beer category
      summary: Get all categories
      operationId: getCategories
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindCategoryResDto'
                example:
                  - id: 1
                    name: '에일'
                    description: 'This is Ale.'
                    children:
                    - id: 10
                      name: '아메리칸 블론드 에일'
                      description: 'This is American Blonde Ale.'
                  - id: 2
                    name: 'IPA'
                    children:
                    - id: 17
                      name: '잉글리쉬 IPA'
                      description: 'This is English IPA.'
                    - id: 21
                      name: '아메리칸 IPA'
                      description: 'This is American IPA.'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories/{categoryId}:
    get:
      tags:
        - beer category
      summary: Get one category found by category id
      operationId: getCategory
      parameters:
        - $ref: '#/components/parameters/categoryId'
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindCategoryResDto'
              examples:
                FindCategoryResDto_Example:
                  $ref: '#/components/examples/FindCategoryResDto_Example'
        '404':
          description: Not found. The category with specified ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
  ####################
  # TAG API
  ####################
  /tags:
    get:
      tags:
        - beer tag
      summary: Get all beer tags
      operationId: getTags
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindTagResDto'
                example:
                  - id: 1
                    name_ko: '사이다'
                    name_en: 'Cider'
                  - id: 2
                    name_ko: '생강'
                    name_en: 'Ginger'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
components:
  schemas:
    ####################
    # REQUEST DTO
    ####################
    MemberCreateReqDto:
      description: Member Signup Form
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string

    MemberUpdateReqDto:
      type: object
      description: Member Profile Update Form
      properties:
        username:
          type: string
          example: 'beerlover'

    ReviewCreateReqDto:
      type: object
      required:
        - content
        - rate
      properties:
        content:
          type: string
        rate:
          type: number
          format: float
          multipleOf: 0.5

    ####################
    # RESPONSE DTO
    ####################
    BaseResDto:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64

    MemberResDto:
      type: object
      required:
        - email
        - password
        - username
        - email_verified
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
        image_url:
          type: string
        email_verified:
          type: boolean
          default: false
      allOf:
        - $ref: '#/components/schemas/BaseResDto'

    FindBeerResDto:
      type: object
      required:
        - name_en
        - name_ko
        - description
        - origin
        - volume
      properties:
        name_en:
          type: string
        name_ko:
          type: string
        description:
          type: string
        origin:
          $ref: '#/components/schemas/CountryResDto'
        volume:
          type: integer
          format: float
          minimum: 0.0
        image_url:
          type: string
        category:
          $ref: '#/components/schemas/FindCategorySupResDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/FindTagResDto'
      allOf:
        - $ref: '#/components/schemas/BaseResDto'
      example:
        $ref: '#/components/examples/FindBeerResDto_Example'
      x-class-extra-annotations:
        - '@lombok.Getter'

    CountryResDto:
      type: object
      properties:
        code:
          type: string

    FindCategoryResDto:
      type: object
      required:
        - description
        - category
      properties:
        description:
          type: string
        category:
          $ref: '#/components/schemas/FindCategoryResDto'
      allOf:
        - $ref: '#/components/schemas/BaseResDto'
      x-class-extra-annotations:
        - '@lombok.Getter'
    
    FindCategorySupResDto:
      type: object
      required:
        - parent
      properties:
        parent:
          $ref: '#/components/schemas/FindCategoryResDto'
      allOf:
        - $ref: '#/components/schemas/BaseResDto'
        - $ref: '#/components/schemas/FindCategoryResDto'
      x-class-extra-annotations:
        - '@lombok.Getter'

    FindTagResDto:
      type: object
      required:
        - name
      properties:
        name_ko:
          type: string
        name_en:
          type: string
      allOf:
        - $ref: '#/components/schemas/BaseResDto'
      x-class-extra-annotations:
        - '@lombok.Getter'
    
    ReviewResDto:
      type: object
      required:
        - rate
      properties:
        content:
          type: string
        rate:
          type: integer
          format: float
      allOf:
        - $ref: '#/components/schemas/BaseResDto'

  securitySchemes:
    password:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources

 
  ####################
  # PARAMETERS
  ####################
  parameters:
    memberId:
      in: path
      name: memberId
      description: Member ID
      example: 1
      required: true
      schema:
        type: integer
        format: int64

    keyword:
      in: query
      name: keyword
      description: Search keyword
      example: '골든 에일'
      schema:
        type: string

    categories:
      in: query
      name: categories
      description: Categories
      schema:
        type: array
        items:
          type: string
        example: ['골든 에일', '아이피에이']
    
    countries:
      in: query
      name: countries
      description: Countries
      schema:
        type: array
        items:
          type: string
        example: ['KO', 'US']
    
    volumes:
      in: query
      name: volumes
      description: Beer Alcohol Volume
      schema:
        type: array
        items:
          type: integer
        example: [4, 8]

    beerId:
      in: path
      name: beerId
      description: beer id
      example: '1'
      required: true
      schema:
        type: integer
        format: int64

    categoryId:
      in: path
      name: categoryId
      description: beer category id
      example: '1'
      required: true
      schema:
        type: integer
        format: int64

    reviewId:
      in: path
      name: reviewId
      description: beer review id
      example: '1'
      required: true
      schema:
        type: integer
        format: int64

  ####################
  # RESPONSES
  ####################
  responses:
    Created:
      description: Created.
    Unauthorized:
      description: Unauthorized. Access token is missing or invalid.
    Forbidden:
      description: Forbidden. Inproper authorization.
    InternalServerError:
      description: Internal server error. Unexpected error.

  ####################
  # EXAMPLES
  ####################
  examples:
    MemberReqDto_Example:
      value:
        email: 'beer.lover@email.com'
        password: 'PWbeer10ver*!'
        username: '비어러버'

    MemberUpdateReqDto_Example:
      value:
        username: '퇴근후한캔'

    ReviewCreateReqDto_Example:
      value:
        content: '이 맥주 진짜 맛있어요! 보일 때마다 사먹을거야'
        rate: 5.0

    MemberResDto_Example:
      value:
        id: 1
        email: 'beer.lover@email.com'
        password: 'beer10ver!@#'
        username: '비어러버'
        image_url: 'returned_from_server: <base_url>/<file_name>'
        email_verified: true

    FindBeerResDto_Example:
      value:
        id: 1
        name_ko: '빅 웨이브'
        name_en: 'Bigwave'
        description: '미묘한 과일 향과 섬세한 홉 향이 나는 가벼운 골든 에일입니다. 부드럽고 마시기 좋은 상쾌한 에일입니다. 가볍게 볶은 허니 몰트는 이 맥주의 황금빛 색조에 기여하고 우리의 특별한 홉 블렌드로 균형을 이루는 약간의 단맛을 제공합니다.'
        origin:
          code: 'US'
          name_ko: '미국'
          name_en: 'The United States'
        volume: 4.4
        image_url: 'returned_from_server: <base_url>/<file_name>'
        category:
          id: 1
          name_ko: '아메리칸 블론드 에일'
          name_en: 'American Blonde Ale'
          description: '아메리칸 블론드 에일은...'
          parent:
            id: 10
            name_ko: '에일'
            name_en: 'Ale'
            description: '에일은...'
        tags: 
          - id: 1
            name_ko: '시트라'
            name_en: 'Citra'
            description: '시트라 홉은...'

    FindCategoryResDto_Example:
      value:
        id: 1
        name: '아메리칸 블론드 에일'
        description: 'This is Amerian Blonde Ale.'

    CountryResDto_Example:
      value:
        code: 'US'

    FindTagResDto_Example:
      value:
        id: 1
        name_ko: '사이다'
        name_en: 'Cider'

    ReviewResDto_Example:
      value:
        id: 1
        content: '이 맥주 진짜 맛있어요! 보일 때마다 사먹을거야'
        rate: 5.0